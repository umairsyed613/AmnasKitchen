@page "/managerecipes"
@page "/managerecipes/{ParamCatId}"


@using ApnaBawarchiKhana.Shared
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject IJSRuntime JsInterop
@inject AbkFetchService AbkFetchService
@inject IToastService ToastService

<style>

    @@media(max-width: 575.98px) {
        .k-grid th, .k-grid td {
            padding: .3rem .3rem;
            font-size: 0.8rem;
        }
    }
</style>

<section id="manageCategories">
    <h2>Manage Recipes</h2>
    <hr />
    <div class="row pb-2 pt-2">
        <div class="col-12">
            <TelerikButton ButtonType="@ButtonType.Submit" OnClick="@MyClickHandler" Primary="false" Class="w-100">Create New Recipe</TelerikButton>
        </div>
    </div>

    <div class="p-3">
        <label for="catId">Choose Category to load Recipes : </label>
        <TelerikDropDownList ValueField="Id" TextField="Name" Data="@categories" DefaultText="Select Category"
                             Id="catId"
                             ValueChanged="@((int id) => CategorySelected(id) )">
        </TelerikDropDownList>
    </div>

    <div class="row pb-5">
        <div class="col-12">

            @if (showLoading)
            {
                <div class="d-flex flex-row w-100 justify-content-center mb-5">
                    <div class="loader"></div>
                </div>
            }

            @if (Recipes != null)
            {
                <TelerikGrid Data="@Recipes" Height="600px" OnDelete="@DeleteHandler"
                             Pageable="true" PageSize="10">
                    <GridColumns>
                        <GridColumn Field="@(nameof(RecipesListByCategory.Thumbnail))" Title="Image">
                            <Template>
                                @{
                                    var recipe = context as RecipesListByCategory;
                                }
                                @if (recipe.Thumbnail != null)
                                {
                                    <div class="text-center recipeImgThumbHolder">
                                        <img src="data:image/bmp;base64, @(Convert.ToBase64String(recipe.Thumbnail))" alt="@($"{recipe.Title}")" class="recipeImgThumb img-thumbnail" />
                                    </div>
                                }
                            </Template>
                        </GridColumn>
                        <GridColumn Field="@(nameof(RecipesListByCategory.Title))" Title="Info">
                            <Template>
                                @{
                                    var recipe = context as RecipesListByCategory;
                                    <div class="d-flex flex-row flex-wrap w-100">
                                        <div class="flex-fill text-truncate roboto text-dark font-weight-bold">@recipe.Title</div>
                                        <span class="flex-fill text-muted text-truncate roboto font-weight-normal">@recipe.Description</span>
                                    </div>
                                }
                            </Template>


                        </GridColumn>
                        <GridCommandColumn Width="120px">
                            <GridCommandButton Command="MyEditCommand" Icon="edit" OnClick="@EditHandler"></GridCommandButton>
                            <GridCommandButton Command="Delete" Icon="delete"></GridCommandButton>
                        </GridCommandColumn>
                    </GridColumns>
                </TelerikGrid>
            }

        </div>
    </div>
</section>

@code {

    [Parameter]
    public string ParamCatId { get; set; }

    public List<Category> categories = new List<Category>();

    public Category CurrentCategory { get; set; }

    List<RecipesListByCategory> Recipes { get; set; }

    public bool showLoading { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        categories = (await AbkFetchService.GetCategories())?.ToList();
    }


    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();

        if (string.IsNullOrEmpty(ParamCatId))
        {
            return;
        }

        await FillGrid(Convert.ToInt32(ParamCatId));

    }

    void CategorySelected(int catId)
    {
        NavigationManager.NavigateTo("/managerecipes/" + catId);
    }

    async Task FillGrid(int catId)
    {
        showLoading = true;
        Recipes = null;
        Recipes = await Http.GetFromJsonAsync<List<RecipesListByCategory>>($"api/Recipe/GetAllRecipesByCategoryId/{catId}");
        showLoading = false;
    }

    public async Task DeleteHandler(GridCommandEventArgs args)
    {
        var recipe = (RecipesListByCategory)args.Item;

        await Http.DeleteAsync($"api/Recipe/DeleteRecipe/{recipe.RecipeId}");
        Recipes.Remove(recipe);
    }

    public void EditHandler(GridCommandEventArgs args)
    {
        var recipe = (RecipesListByCategory)args.Item;

        if (recipe == null)
        {
            ToastService.ShowError("Failed to get recipe in edit mode.");
            return;
        }

        NavigationManager.NavigateTo($"/createrecipe/{recipe.RecipeId}");
    }

    protected void MyClickHandler()
    {
        NavigationManager.NavigateTo("/createrecipe");
    }
}
