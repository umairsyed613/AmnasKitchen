@page "/createrecipe"
@page "/createrecipe/{recipeId}"

@inject AbkFetchService AbkFetchService
@inject HttpClient Http
@using ApnaBawarchiKhana.Shared
@inject IToastService toastService
@inject NavigationManager NavigationManager
<style>

    .k-window {
        max-width: 350px;
    }

    .k-edit-form-container {
        max-width: 300px !important;
        min-width: 300px !important;
    }

    .k-edit-label .k-edit-buttons {
        margin: 0 !important;
    }

    .k-grid th, .k-grid td {
        padding: .3rem .75rem;
        font-size: 0.8rem;
    }

    .k-grid > .k-header > .k-button {
        padding: 0.3rem;
        font-size: 0.8rem;
    }
</style>
<section id="CreateRecipe">
    <h2>Create Recipe</h2>
    <hr />

    <div class="row p-3 m-0 w-100 roboto">

        <EditForm EditContext="@MyEditContext" OnValidSubmit="@HandleValidSubmit" class="w-100">
            <DataAnnotationsValidator />

            <div class="form-group w-100">
                <TelerikTextBox @bind-Value="@recipeForm.Title" PlaceHolder="Enter Recipe Title" Width="100%"></TelerikTextBox>
            </div>

            <div class="form-group w-100">
                <TelerikMultiSelect Data="@categories"
                                    @bind-Value="@recipeForm.SelectedCategoriesIds"
                                    ValueField="@nameof(Category.Id)"
                                    TextField="@nameof(Category.Name)"
                                    Placeholder="Select Categories"
                                    Width="100%"
                                    Id="products-multiselect" />
            </div>

            <div class="d-flex flex-row flex-wrap">
                <div class="form-group mr-3">
                    <label for="Recipe-Time">Time to prepare</label>
                    <TelerikNumericTextBox @bind-Value="@recipeForm.Time" Id="Recipe-Time"></TelerikNumericTextBox>
                </div>
                <div class="form-group">
                    <label for="timeUnit">Time Unit</label>
                    <TelerikDropDownList @bind-Value="@recipeForm.TimeUnit" Data="@TimeUnits" DefaultText="Select Time Unit" Id="timeUnit">
                    </TelerikDropDownList>
                </div>
            </div>
            <div class="form-group w-100">
                <label for="MealServing">Serving (@recipeForm.Serving)</label>
                <input type="range" min="1" max="10" @bind="@recipeForm.Serving" class="form-control-range" id="MealServing">
            </div>

            <div class="form-group w-100">
                <label for="MealDifficulty">Difficulty level (@recipeForm.Difficulty)</label>
                <input type="range" min="1" max="5" @bind="@recipeForm.Difficulty" class="form-control-range" id="MealDifficulty">

                <div class="diffbar mb-2">

                    @if (recipeForm.Difficulty >= 1 && recipeForm.Difficulty <= 5)
                    {
                        <div id="lvl-@(recipeForm.Difficulty)" class="difflvl lvl-@(recipeForm.Difficulty)"></div>
                    }
                    else
                    {
                        <div id="lvl-1" class="difflvl lvl-1"></div>
                    }
                </div>
            </div>

            <div class="form-group w-100 pt-3">
                <textarea rows="5" class="form-control w-100" placeholder="Enter Recipe Description" @bind="recipeForm.Description" />
            </div>

            <div class="form-group w-100">
                <label>Add Ingredients</label>
                <TelerikGrid Data="@recipeForm.Ingredients" Height="200px" EditMode="GridEditMode.Popup" OnUpdate="@UpdateHandler"
                             OnDelete="@DeleteHandler"
                             OnCreate="@CreateHandler">
                    <GridColumns>
                        <GridColumn Field="@(nameof(Ingredient.Quantity))" Title="Quantity" />
                        <GridColumn Field="@(nameof(Ingredient.StepNr))" Title="StepNr" />
                        <GridColumn Field="@(nameof(Ingredient.Description))" Title="Description" />
                        <GridCommandColumn>
                            <GridCommandButton Command="Save" Icon="save" ShowInEdit="true"></GridCommandButton>
                            <GridCommandButton Command="Edit" Icon="edit"></GridCommandButton>
                            <GridCommandButton Command="Delete" Icon="delete"></GridCommandButton>
                            <GridCommandButton Command="Cancel" Icon="cancel" ShowInEdit="true"></GridCommandButton>
                        </GridCommandColumn>
                    </GridColumns>
                    <GridToolBar>
                        <GridCommandButton Command="Add" Icon="add">Add Ingredient</GridCommandButton>
                    </GridToolBar>
                </TelerikGrid>
            </div>

            <div class="form-group w-100">
                <label>Add Directions</label>
                <TelerikGrid Data="@recipeForm.Directions" Height="200px" EditMode="GridEditMode.Popup" OnUpdate="@DirectionUpdateHandler"
                             OnDelete="@DirectionDeleteHandler"
                             OnCreate="@DirectionCreateHandler">
                    <GridColumns>
                        <GridColumn Field="@(nameof(Direction.StepNr))" Title="StepNr" />
                        <GridColumn Field="@(nameof(Direction.Step))" Title="Step" />
                        <GridCommandColumn>
                            <GridCommandButton Command="Save" Icon="save" ShowInEdit="true"></GridCommandButton>
                            <GridCommandButton Command="Edit" Icon="edit"></GridCommandButton>
                            <GridCommandButton Command="Delete" Icon="delete"></GridCommandButton>
                            <GridCommandButton Command="Cancel" Icon="cancel" ShowInEdit="true"></GridCommandButton>
                        </GridCommandColumn>
                    </GridColumns>
                    <GridToolBar>
                        <GridCommandButton Command="Add" Icon="add">Add Direction</GridCommandButton>
                    </GridToolBar>
                </TelerikGrid>
            </div>


            <div class="form-group w-100">
                <label>Upload Recipe Images</label> <span class="text-muted">(max size 2mb)</span>
                <TelerikUpload @ref="@UploadRef" Multiple="true" SaveUrl="@SaveUrl" RemoveUrl="@RemoveUrl" OnUpload="@OnUploadHandler" OnRemove="@onRemoveHandler"
                               OnSuccess="@OnSuccessHandler"
                               AllowedExtensions="@( new List<string>() { ".jpg", ".png", ".jpeg" } )"
                               MaxFileSize="20000000" MinFileSize="1000" />
            </div>

            <div class="mt-4">
                <ValidationSummary />
            </div>

            @if (isUpdateForm)
            {
                <TelerikButton ButtonType="@ButtonType.Submit" Icon="save" Primary="true">Update Recipe</TelerikButton>
            }
            else
            {
                <TelerikButton ButtonType="@ButtonType.Submit" Icon="add" Primary="true">Create Recipe</TelerikButton>
            }

        </EditForm>

        @if (showLoading)
        {
            <Loader Size="5" />
        }
    </div>

</section>

@code {
    [Parameter]
    public string recipeId { get; set; }

    public Recipe recipe { get; set; }

    public bool isUpdateForm { get; set; } = false;

    protected EditContext MyEditContext { get; set; }

    public RecipeForm recipeForm { get; set; }

    public List<string> ImagesUrls { get; set; }

    public List<Category> categories = new List<Category>();

    public List<string> TimeUnits { get; set; }

    public string SaveUrl => ToAbsoluteUrl("api/upload/save");
    public string RemoveUrl => ToAbsoluteUrl("api/upload/remove");
    private static readonly string pathToIcons = "/images/tempupload/";

    Telerik.Blazor.Components.TelerikUpload UploadRef { get; set; }

    public bool showLoading { get; set; }

    protected override async Task OnInitializedAsync()
    {
        TimeUnits = new List<string>{
                            "H",
                            "M"
                        };

        ImagesUrls = new List<string>();

        categories = (await AbkFetchService.GetCategories())?.ToList();

        recipeForm = new RecipeForm();
        recipeForm.Ingredients = new List<Ingredient>();
        recipeForm.Directions = new List<Direction>();
        recipeForm.Difficulty = 1;
        recipeForm.Serving = 1;

        MyEditContext = new EditContext(recipeForm);
    }

    protected override async Task OnParametersSetAsync()
    {
        await  base.OnParametersSetAsync();

        if (string.IsNullOrWhiteSpace(recipeId))
        {
            return;
        }


        recipe = await Http.GetFromJsonAsync<Recipe>($"api/Recipe/GetRecipeById/{recipeId}");

        if (recipe == null)
        {
            toastService.ShowError("Failed to load recipe", $"Recipe Id {recipeId}");
            return;
        }

        recipeForm.Ingredients = null;
        recipeForm.Ingredients = new List<Ingredient>();
        recipeForm.Directions = null;
        recipeForm.Directions = new List<Direction>();

        recipeForm.Ingredients.AddRange(recipe.Ingredients.ToList());
        recipeForm.Directions.AddRange(recipe.Directions.ToList());
        recipeForm.Difficulty = recipe.Difficulty;
        recipeForm.Serving = recipe.Serving;
        recipeForm.Time = recipe.Time;
        recipeForm.TimeUnit = recipe.TimeUnit;
        recipeForm.Title = recipe.Title;
        recipeForm.Description = recipe.Description;
        recipeForm.SelectedCategoriesIds = recipe.RecipeCategories.Select(s => s.CategoryId).ToList();

        isUpdateForm = true;
    }

    async Task HandleValidSubmit()
    {
        if (!recipeForm.SelectedCategoriesIds.Any())
        {
            toastService.ShowError("Please choose categories the recipe belongs to!");
            return;
        }

        showLoading = true;

        var recipeFormData = new CreateRecipeFormData()
        {
            Recipe = recipeForm,
            Images = ImagesUrls
        };

        var response = await Http.PostAsJsonAsync("api/Recipe/CreateRecipe", recipeFormData);

        if (response.IsSuccessStatusCode)
        {
            toastService.ShowSuccess("Recipe has been created sucessfully");
        }
        else
        {
            toastService.ShowError("Failed to Create Recipe");
            ImagesUrls = new List<string>();
        }

        showLoading = false;
    }

    public void UpdateHandler(GridCommandEventArgs args)
    {
        var ingredient = (Ingredient)args.Item;

        var matchingItem = recipeForm.Ingredients.FirstOrDefault(c => c.StepNr == ingredient.StepNr);

        if (matchingItem != null)
        {
            matchingItem.StepNr = ingredient.StepNr;
            matchingItem.Quantity = ingredient.Quantity;
            matchingItem.Description = ingredient.Description;

            toastService.ShowInfo("Item updated in the grid");
        }
    }

    public void DeleteHandler(GridCommandEventArgs args)
    {
        var ingredient = (Ingredient)args.Item;

        recipeForm.Ingredients.Remove(ingredient);

        toastService.ShowError("Item Deleted From Grid");
    }

    public void CreateHandler(GridCommandEventArgs args)
    {
        var ingredient = (Ingredient)args.Item;


        if (recipeForm.Ingredients.Any(a => a.StepNr == ingredient.StepNr))
        {
            toastService.ShowError("Ingredient with same step number already exists!");
            return;
        }

        if (ingredient.StepNr <= 0)
        {
            toastService.ShowError("Ingredient step number cannot be 0 or below!");
            return;
        }

        recipeForm.Ingredients.Add(ingredient);


        toastService.ShowInfo("Item added to the Grid");
    }

    public void DirectionUpdateHandler(GridCommandEventArgs args)
    {
        var direction = (Direction)args.Item;

        var matchingItem = recipeForm.Directions.FirstOrDefault(c => c.StepNr == direction.StepNr);

        if (matchingItem != null)
        {
            matchingItem.StepNr = direction.StepNr;
            matchingItem.Step = direction.Step;

            toastService.ShowInfo("Item updated in the grid");
        }
    }

    public void DirectionDeleteHandler(GridCommandEventArgs args)
    {
        var direction = (Direction)args.Item;

        recipeForm.Directions.Remove(direction);

        toastService.ShowError("Item Deleted From Grid");
    }

    public void DirectionCreateHandler(GridCommandEventArgs args)
    {
        var direction = (Direction)args.Item;


        if (recipeForm.Directions.Any(a => a.StepNr == direction.StepNr))
        {
            toastService.ShowError("direction with same step number already exists!");
            return;
        }

        if (direction.StepNr <= 0)
        {
            toastService.ShowError("Ingredient step number cannot be 0 or below!");
            return;
        }

        recipeForm.Directions.Add(direction);


        toastService.ShowInfo("Item added to the Grid");
    }

    public string ToAbsoluteUrl(string url)
    {
        return $"{NavigationManager.BaseUri}{url}";
    }

    //////////////////////////////////////////////////////////////////////////////////////////

    void OnUploadHandler(UploadEventArgs e)
    {
        e.RequestData.Add("path", pathToIcons);
    }

    void onRemoveHandler(UploadEventArgs e)
    {
        e.RequestData.Add("path", pathToIcons);

        foreach (var f in e.Files)
        {
            var toRemove = ImagesUrls.FirstOrDefault(w => w.EndsWith(f.Name));
            if (!string.IsNullOrWhiteSpace(toRemove))
            {
                ImagesUrls.Remove(toRemove);
            }
        }
    }

    void OnSuccessHandler(UploadSuccessEventArgs e)
    {
        var actionText = e.Operation == UploadOperationType.Upload ? "uploaded" : "removed";

        foreach (var file in e.Files)
        {
            ImagesUrls.Add(pathToIcons + file.Name);
        }
    }

}
